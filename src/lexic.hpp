#ifndef LEXIC_HPP
#define LEXIC_HPP

#include <iostream>
#include <vector>
#include <map>
#include "token.hpp"

class Lexic {
	public:
		Lexic(char*);
		int Token;
		std::string Symbol;
		void Next();

	private:
		void Analyze(char*);
		void Initialyze();
		int getValue(char);
		int symbolTable(std::map<std::string,int>&,const char*);
		void Error();
		
		enum {
			q0,// \s \n \t
			q1,// a-z,A-Z,_
			q2,// 0-9
			q3,// *
			q4,// +
			q5,// -
			q6,// /
			q7,// %
			q8,// >
			q9,// >=
			q10,// <
			q11,// <=
			q12,// =
			q13,// ==
			q14,// !
			q15,// !=
			q16,// (
			q17,// )
			q18,// {
			q19,// }
			q20,// ;
			q21,// //
			q22,// /*
			q23,// */argv
			q24,// ,
			qer,// ERROR
			NS  // TOTAL
		};

		enum {// \s | a-z,A-Z,_ | 0-9 | + | - | / | * | % | < | > |  = |  ! |  ( |  ) |  { |  } |  ; |  , | \n | \t | invalid |
							i0,         i1,   i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19,       IN, NI
		};

		int stateMachine[NS][NI] = {
		//    \s |azZ|09 |+ | - | / | * | % | < | > |  = |  ! |  ( |  ) |  { |  } |  ; |  , | \n | \t | invalid |
		//    i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i10  i11  i12  i13  i14  i15  i16  i17  i18  i19   IN
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q0 \s
			{ q0, q1, q1, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q1 a-z,A-Z,_
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q2 0-9
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q3 *
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q4 +
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q5 -
			{ q0, q1, q2, q4, q5,q21,q22, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q6 /
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q7 %
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8,  q9, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q8 >
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q9 >=
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q11, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q10 <
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q11 <=
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q13, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q12 =
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q13 ==
			{qer,qer,qer,qer,qer,qer,qer,qer,qer,qer, q15, qer, qer, qer, qer, qer, qer, qer, qer, qer, qer},//q14 !
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q15 !=
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q16 (
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q17 )
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q18 {
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q19 }
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q20 ;
			{q21,q21,q21,q21,q21,q21,q21,q21,q21,q21, q21, q21, q21, q21, q21, q21, q21, q21,  q0, q21, q21},//q21 //
			{q22,q22,q22,q22,q22,q22,q23,q22,q22,q22, q22, q22, q22, q22, q22, q22, q22, q22, q22, q22, q22},//q22 /*
			{q22,q22,q22,q22,q22, q0,q23,q22,q22,q22, q22, q22, q22, q22, q22, q22, q22, q22, q22, q22, q22},//q23 /* */
			{ q0, q1, q2, q4, q5, q6, q3, q7,q10, q8, q12, q14, q16, q17, q18, q19, q20, q24,  q0,  q0, qer},//q24 ,
			{ q0,qer,qer,qer,qer,qer,qer,qer,qer,qer, q15, qer, qer, qer, qer, qer, qer, qer,  q0,  q0, qer}///qer
		};

		int stateOut[NS][NI] = {
		//    \s|azZ|09 |+  | - | / | * | % | < | > |  = |  ! |  ( |  ) |  { |  } |  ; |  , | \n | \t | invalid |
		//    i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i10  i11  i12  i13  i14  i15  i16  i17  i18  i19   IN
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1},//q0 \s
			{  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  -1},//q1 a-z,A-Z,_
			{  2,  2, -1,  2,  2,  2,  2,  2,  2,  2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,  -1},//q2 0-9
			{  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3},//q3 *
			{  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4},//q4 +
			{  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5},//q5 -
			{  6,  6,  6,  6,  6, -1, -1,  6,  6,  6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6},//q6 /
			{  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7},//q7 %
			{  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  -1,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8},//q8 >
			{  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9},//q9 >=
			{ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  -1,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10},//q10 <
			{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11},//q11 <=
			{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12},//q12 =
			{ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13},//q13 ==
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1},//q14 !
			{ 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15},//q15 !=
			{ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},//q16 (
			{ 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17},//q17 )
			{ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18},//q18 {
			{ 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19},//q19 }
			{ 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20},//q20 ;
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,  -1,  -1},//q21 //
			{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1},//q22 /*
			{ -1, -1, -1, -1, -1, 23, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1},//q23 /* */
			{ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24},//q24 ,
			{ 25, -1, -1, -1, -1, -1, -1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  25,  25,  -1},//qer
		};

		std::map< std::string, int> reserved;
		std::vector<std::string> tokenSymbol;
		std::map< int, std::string > symtbl;
		std::vector< std::pair<int,int> > token;
		int pos;
};

#endif
